import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Load the dataset
df = pd.read_csv('diabetes.csv')
# Explore the data
print(df.head())
print(df.info())
# Preprocessing
print(df.isnull().sum()) #check for missing values
X = df.drop('Outcome', axis=1) #feature-target split
y = df['Outcome']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)


#Train the model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

#Make predictions
y_pred = model.predict(X_test)

#Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

print(classification_report(y_test, y_pred))

# Example input
new_data = np.array([[5, 116, 74, 0, 0, 25.6, 0.201, 30]])  # Replace with actual values
new_data = scaler.transform(new_data)
prediction = model.predict(new_data)
print("Diabetic" if prediction[0] == 1 else "Non-Diabetic")

# Save the trained model
joblib.dump(model, 'diabetes_prediction_model.pkl')
